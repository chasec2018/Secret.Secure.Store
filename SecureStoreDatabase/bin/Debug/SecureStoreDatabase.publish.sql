/*
Deployment script for SecureStore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar KeyPassPhrase "SamplePhrase#1234"
:setvar DatabaseName "SecureStore"
:setvar DefaultFilePrefix "SecureStore"
:setvar DefaultDataPath "C:\Users\chase\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\ASSIMALIGN.LOCDEV\"
:setvar DefaultLogPath "C:\Users\chase\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\ASSIMALIGN.LOCDEV\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [Store]...';


GO
CREATE SCHEMA [Store]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Store].[SecretVariables]...';


GO
CREATE TABLE [Store].[SecretVariables] (
    [StoreUsername]  VARCHAR (55)     NOT NULL,
    [EntryKey]       VARCHAR (255)    NOT NULL,
    [EntryName]      VARCHAR (255)    NOT NULL,
    [EntryUse]       VARCHAR (255)    NOT NULL,
    [Variable]       VARBINARY (8000) NOT NULL,
    [EntryStartDate] DATE             NOT NULL,
    [EntryEndDate]   DATE             NOT NULL,
    [CreationDate]   DATE             NOT NULL,
    [CreationTime]   TIME (6)         NOT NULL,
    CONSTRAINT [PrimaryKeyVariableKey] PRIMARY KEY CLUSTERED ([EntryKey] ASC),
    CONSTRAINT [UniqueUserVariablesName] UNIQUE NONCLUSTERED ([StoreUsername] ASC, [EntryName] ASC)
);


GO
PRINT N'Creating [Store].[SecretCredentials]...';


GO
CREATE TABLE [Store].[SecretCredentials] (
    [StoreUsername]  VARCHAR (55)     NOT NULL,
    [EntryKey]       VARCHAR (255)    NOT NULL,
    [EntryName]      VARCHAR (255)    NOT NULL,
    [EntryUse]       VARCHAR (255)    NOT NULL,
    [Username]       VARBINARY (8000) NOT NULL,
    [Password]       VARBINARY (8000) NOT NULL,
    [EntryStartDate] DATE             NOT NULL,
    [EntryEndDate]   DATE             NOT NULL,
    [CreationDate]   DATE             NOT NULL,
    [CreationTime]   TIME (6)         NOT NULL,
    CONSTRAINT [PrimaryKeyCredentialsKey] PRIMARY KEY CLUSTERED ([EntryKey] ASC),
    CONSTRAINT [UniqueUserCredentialsName] UNIQUE NONCLUSTERED ([StoreUsername] ASC, [EntryName] ASC)
);


GO
PRINT N'Creating [Store].[SecretConnectionStrings]...';


GO
CREATE TABLE [Store].[SecretConnectionStrings] (
    [StoreUsername]    VARCHAR (55)     NOT NULL,
    [EntryKey]         VARCHAR (255)    NOT NULL,
    [EntryName]        VARCHAR (255)    NOT NULL,
    [EntryUse]         VARCHAR (255)    NOT NULL,
    [ConnectionString] VARBINARY (8000) NOT NULL,
    [EntryStartDate]   DATE             NOT NULL,
    [EntryEndDate]     DATE             NOT NULL,
    [CreationDate]     DATE             NOT NULL,
    [CreationTime]     TIME (6)         NOT NULL,
    CONSTRAINT [PrimaryKeyConnectionStringKey] PRIMARY KEY CLUSTERED ([EntryKey] ASC),
    CONSTRAINT [UniqueUserConnectionStringName] UNIQUE NONCLUSTERED ([StoreUsername] ASC, [EntryName] ASC)
);


GO
PRINT N'Creating [Store].[SecretTokens]...';


GO
CREATE TABLE [Store].[SecretTokens] (
    [StoreUsername]  VARCHAR (55)     NOT NULL,
    [EntryKey]       VARCHAR (255)    NOT NULL,
    [EntryName]      VARCHAR (255)    NOT NULL,
    [EntryUse]       VARCHAR (255)    NOT NULL,
    [Token]          VARBINARY (8000) NOT NULL,
    [EntryStartDate] DATE             NOT NULL,
    [EntryEndDate]   DATE             NOT NULL,
    [CreationDate]   DATE             NOT NULL,
    [CreationTime]   TIME (6)         NOT NULL,
    CONSTRAINT [PrimaryKeyTokenKey] PRIMARY KEY CLUSTERED ([EntryKey] ASC),
    CONSTRAINT [UniqueUserTokensName] UNIQUE NONCLUSTERED ([StoreUsername] ASC, [EntryName] ASC)
);


GO
PRINT N'Creating [Store].[AccessKeys]...';


GO
CREATE TABLE [Store].[AccessKeys] (
    [StoreAccessKey]    VARBINARY (900) NOT NULL,
    [StoreUsername]     VARCHAR (55)    NOT NULL,
    [UserFirstName]     VARCHAR (55)    NULL,
    [UserLastName]      VARCHAR (55)    NULL,
    [UserMiddleName]    VARCHAR (55)    NULL,
    [UserEncryptionKey] VARCHAR (8000)  NOT NULL,
    [UserStartDate]     DATE            NOT NULL,
    [UserEndDate]       DATE            NOT NULL,
    [CreationDate]      DATE            NOT NULL,
    [CreationTime]      TIME (6)        NOT NULL,
    CONSTRAINT [PrimaryKeyStoreUsername] PRIMARY KEY CLUSTERED ([StoreUsername] ASC),
    CONSTRAINT [UniqueAccessKey] UNIQUE NONCLUSTERED ([StoreAccessKey] ASC)
);


GO
PRINT N'Creating [Store].[SecretClientRequestLog]...';


GO
CREATE TABLE [Store].[SecretClientRequestLog] (
    [RequestId]     BIGINT        IDENTITY (1000, 1) NOT NULL,
    [RequestDate]   DATE          NOT NULL,
    [RequestTime]   TIME (6)      NOT NULL,
    [Requester]     VARCHAR (55)  NOT NULL,
    [RequestMethod] VARCHAR (25)  NOT NULL,
    [RequestHeader] VARCHAR (MAX) NOT NULL,
    [RequestQuery]  VARCHAR (MAX) NOT NULL,
    CONSTRAINT [PrimaryKeyRequest] PRIMARY KEY CLUSTERED ([RequestId] ASC, [RequestDate] ASC, [RequestTime] ASC, [Requester] ASC, [RequestMethod] ASC)
);


GO
PRINT N'Creating unnamed constraint on [Store].[SecretVariables]...';


GO
ALTER TABLE [Store].[SecretVariables]
    ADD DEFAULT GetDate() FOR [EntryStartDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretVariables]...';


GO
ALTER TABLE [Store].[SecretVariables]
    ADD DEFAULT DateAdd(yy,50,GetDate()) FOR [EntryEndDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretVariables]...';


GO
ALTER TABLE [Store].[SecretVariables]
    ADD DEFAULT GetDate() FOR [CreationDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretVariables]...';


GO
ALTER TABLE [Store].[SecretVariables]
    ADD DEFAULT Convert(Time(6),GetDate()) FOR [CreationTime];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretCredentials]...';


GO
ALTER TABLE [Store].[SecretCredentials]
    ADD DEFAULT GetDate() FOR [EntryStartDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretCredentials]...';


GO
ALTER TABLE [Store].[SecretCredentials]
    ADD DEFAULT DateAdd(yy,50,GetDate()) FOR [EntryEndDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretCredentials]...';


GO
ALTER TABLE [Store].[SecretCredentials]
    ADD DEFAULT GetDate() FOR [CreationDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretCredentials]...';


GO
ALTER TABLE [Store].[SecretCredentials]
    ADD DEFAULT Convert(Time(6),Current_TimeStamp) FOR [CreationTime];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretConnectionStrings]...';


GO
ALTER TABLE [Store].[SecretConnectionStrings]
    ADD DEFAULT GetDate() FOR [EntryStartDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretConnectionStrings]...';


GO
ALTER TABLE [Store].[SecretConnectionStrings]
    ADD DEFAULT DateAdd(yy,50,GetDate()) FOR [EntryEndDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretConnectionStrings]...';


GO
ALTER TABLE [Store].[SecretConnectionStrings]
    ADD DEFAULT GetDate() FOR [CreationDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretConnectionStrings]...';


GO
ALTER TABLE [Store].[SecretConnectionStrings]
    ADD DEFAULT Convert(Time(6),GetDate()) FOR [CreationTime];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretTokens]...';


GO
ALTER TABLE [Store].[SecretTokens]
    ADD DEFAULT GetDate() FOR [EntryStartDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretTokens]...';


GO
ALTER TABLE [Store].[SecretTokens]
    ADD DEFAULT DateAdd(yy,50,GetDate()) FOR [EntryEndDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretTokens]...';


GO
ALTER TABLE [Store].[SecretTokens]
    ADD DEFAULT GetDate() FOR [CreationDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretTokens]...';


GO
ALTER TABLE [Store].[SecretTokens]
    ADD DEFAULT Convert(Time(6),GetDate()) FOR [CreationTime];


GO
PRINT N'Creating unnamed constraint on [Store].[AccessKeys]...';


GO
ALTER TABLE [Store].[AccessKeys]
    ADD DEFAULT GetDate() FOR [UserStartDate];


GO
PRINT N'Creating unnamed constraint on [Store].[AccessKeys]...';


GO
ALTER TABLE [Store].[AccessKeys]
    ADD DEFAULT DateAdd(yy,50,GetDate()) FOR [UserEndDate];


GO
PRINT N'Creating unnamed constraint on [Store].[AccessKeys]...';


GO
ALTER TABLE [Store].[AccessKeys]
    ADD DEFAULT GetDate() FOR [CreationDate];


GO
PRINT N'Creating unnamed constraint on [Store].[AccessKeys]...';


GO
ALTER TABLE [Store].[AccessKeys]
    ADD DEFAULT Convert(Time(6),Current_TimeStamp) FOR [CreationTime];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretClientRequestLog]...';


GO
ALTER TABLE [Store].[SecretClientRequestLog]
    ADD DEFAULT GetDate() FOR [RequestDate];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretClientRequestLog]...';


GO
ALTER TABLE [Store].[SecretClientRequestLog]
    ADD DEFAULT Convert(Time(6), Current_TimeStamp) FOR [RequestTime];


GO
PRINT N'Creating [Store].[ForeignKeyUsernameAD]...';


GO
ALTER TABLE [Store].[SecretVariables] WITH NOCHECK
    ADD CONSTRAINT [ForeignKeyUsernameAD] FOREIGN KEY ([StoreUsername]) REFERENCES [Store].[AccessKeys] ([StoreUsername]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [Store].[ForeignKeyUsernameAA]...';


GO
ALTER TABLE [Store].[SecretCredentials] WITH NOCHECK
    ADD CONSTRAINT [ForeignKeyUsernameAA] FOREIGN KEY ([StoreUsername]) REFERENCES [Store].[AccessKeys] ([StoreUsername]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [Store].[ForeignKeyUsernameAB]...';


GO
ALTER TABLE [Store].[SecretConnectionStrings] WITH NOCHECK
    ADD CONSTRAINT [ForeignKeyUsernameAB] FOREIGN KEY ([StoreUsername]) REFERENCES [Store].[AccessKeys] ([StoreUsername]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [Store].[ForeignKeyUsernameA]...';


GO
ALTER TABLE [Store].[SecretTokens] WITH NOCHECK
    ADD CONSTRAINT [ForeignKeyUsernameA] FOREIGN KEY ([StoreUsername]) REFERENCES [Store].[AccessKeys] ([StoreUsername]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [Store].[CheckRequestType]...';


GO
ALTER TABLE [Store].[SecretClientRequestLog] WITH NOCHECK
    ADD CONSTRAINT [CheckRequestType] CHECK ([RequestMethod]='GET' Or [RequestMethod] = 'POST' Or [RequestMethod] = 'PUT' Or [RequestMethod] = 'DELETE');


GO
PRINT N'Creating [Store].[EntireStoreSecretSet]...';


GO
Create View Store.EntireStoreSecretSet
As
Select	
			StoreUsername,
			EntryKey,
			EntryType,
			EntryName,
			EntryUse,
			EntryUsername,
			EntryPassword,
			EntryConnectionString,
			EntryToken,
			EntryVariable,
			EntryStartDate,
			EntryEndDate
		From
			(
					Select 
						1 As EntryType,
						[StoreUsername], 
						[EntryKey],
						[EntryName],
						[EntryUse],
						Convert(Varchar(Max), DecryptByKey([Username])) As EntryUsername,
						Convert(Varchar(Max), DecryptByKey([Password])) As EntryPassword,
						Null As EntryConnectionString,
						Null As EntryToken,
						Null As EntryVariable,
						[EntryStartDate],
						[EntryEndDate]
					From 
						[Store].[SecretCredentials]

				Union All

					Select 
						2 As EntryType,
						[StoreUsername], 
						[EntryKey],
						[EntryName],
						[EntryUse],
						Null As EntryUsername,
						Null As EntryPassword,
						Convert(Varchar(Max), DecryptByKey([ConnectionString])) As EntryConnectionString,
						Null As EntryToken,
						Null As EntryVariable,
						[EntryStartDate],
						[EntryEndDate]
					From 
						[Store].[SecretConnectionStrings]
		

				Union All

					Select 
						3 As EntryType,
						[StoreUsername], 
						[EntryKey],
						[EntryName],
						[EntryUse],
						Null As EntryUsername,
						Null As EntryPassword,
						Null As EntryConnectionString,
						Convert(Varchar(Max), DecryptByKey([Token])) As EntryToken,
						Null As EntryVariable,
						[EntryStartDate],
						[EntryEndDate]
					From 
						[Store].[SecretTokens]

				Union All

					Select 
						4 As EntryType,
						[StoreUsername], 
						[EntryKey],
						[EntryName],
						[EntryUse],
						Null As EntryUsername,
						Null As EntryPassword,
						Null As EntryConnectionString,
						Null As EntryToken,
						Convert(Varchar(Max), DecryptByKey([Variable])) As EntryVariable,
						[EntryStartDate],
						[EntryEndDate]
					From 
						[Store].[SecretVariables]
		
		
			) As StoreSecrests
GO
PRINT N'Creating [store].[storekey]...';


GO
Create Function [store].[storekey]()
Returns Varchar(255)
As
Begin

	Declare @year Varchar(5);
	Declare @monthday Varchar(10);
	Declare @timestamp Varchar(10)

		Set @year = concat('y',format(getdate(), 'yy'))
		Set @monthday = concat('m',format(getdate(),'mm'),'d',format(getdate(),'dd'))
		Set @timestamp = format(current_timestamp,'hhmmss')

	Return concat(@year, '-',@monthday, '-',@timestamp)
End
GO
PRINT N'Creating unnamed constraint on [Store].[SecretVariables]...';


GO
ALTER TABLE [Store].[SecretVariables]
    ADD DEFAULT [Store].[StoreKey]() FOR [EntryKey];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretCredentials]...';


GO
ALTER TABLE [Store].[SecretCredentials]
    ADD DEFAULT [Store].[StoreKey]() FOR [EntryKey];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretConnectionStrings]...';


GO
ALTER TABLE [Store].[SecretConnectionStrings]
    ADD DEFAULT [Store].[StoreKey]() FOR [EntryKey];


GO
PRINT N'Creating unnamed constraint on [Store].[SecretTokens]...';


GO
ALTER TABLE [Store].[SecretTokens]
    ADD DEFAULT [Store].[StoreKey]() FOR [EntryKey];


GO
PRINT N'Creating [Store].[OpenStoreSymmetricKey]...';


GO
Create Procedure [Store].[OpenStoreSymmetricKey]
AS
	Open Symmetric Key StoreKeyA
	Decryption By Password = '$(KeyPassPhrase)'

Return 0
GO
PRINT N'Creating [Store].[ChangeSymmetricKeyPassphrase]...';


GO
Create Procedure [Store].[ChangeSymmetricKeyPassphrase]
	@OldPassPhrase Varchar(255),
	@NewPassphrase Varchar(255)
As
Begin

	Declare @step_one Varchar(Max)
	Declare @step_two Varchar(Max)
	Declare @step_thr Varchar(max)

	Exec [Store].[OpenStoreSymmetricKey]

	Set @step_one =	'Alter Symmetric Key StoreKeyA
					 Add Encryption By Password = ''' + @NewPassphrase + ''''

	Set @step_two = 'Alter Symmetric Key StoreKeyA
					 Drop Encryption By Password = ''' + @OldPassphrase + ''''

	Set @step_thr = 'Alter Procedure [Store].[OpenStoreSymmetricKey]
					 As
						Open Symmetric Key StoreKeyA
						Decryption By Password = ''' + @NewPassphrase + '''
					Return 0'

	Exec (@step_one)
	Exec (@step_two)
	Exec (@step_thr)

End
Return 0
GO
PRINT N'Creating [Store].[ReturnErrorInformation]...';


GO
Create Procedure Store.ReturnErrorInformation  
As
Select  
     ERROR_NUMBER() AS ErrorNumber  
    ,ERROR_SEVERITY() AS ErrorSeverity  
    ,ERROR_STATE() AS ErrorState  
    ,ERROR_PROCEDURE() AS ErrorProcedure  
    ,ERROR_LINE() AS ErrorLine  
    ,ERROR_MESSAGE() AS ErrorMessage;
GO
PRINT N'Creating [Store].[DeleteStoreSecret]...';


GO
Create Procedure Store.DeleteStoreSecret
	@StoreUsername Varchar(255),
	@EntryKey Varchar(255),
	@EntryType int
As

	Begin Try
		If @EntryType = 1
			Begin 
				Delete From 
					[Store].[SecretCredentials]
				Where 
					[EntryKey] = @EntryKey And
					[StoreUsername] = @StoreUsername
			End 

		Else If @EntryType = 2
			Begin 
				Delete From 
					[Store].[SecretConnectionStrings]
				Where 
					[EntryKey] = @EntryKey And
					[StoreUsername] = @StoreUsername
			End

		Else If @EntryType = 3
			Begin 
				Delete From 
					[Store].[SecretTokens]
				Where 
					[EntryKey] = @EntryKey And
					[StoreUsername] = @StoreUsername
			End 

		Else If @EntryType = 4
			Begin 
				Delete From 
					[Store].[SecretVariables]
				Where 
					[EntryKey] = @EntryKey And
					[StoreUsername] = @StoreUsername
			End

		Select 
			@EntryKey As EffectedRecord,
			IIF(@@ROWCOUNT=0,'No Records Affected', 'Deletion was Successful') As RecordStatus,
			@@ROWCOUNT As RecordCount
	End Try

	Begin Catch
		Execute Store.ReturnErrorInformation;
	End Catch

Return
GO
PRINT N'Creating [Store].[CreateNewAccessKey]...';


GO
Create Procedure [Store].[CreateNewAccessKey]
	@FirstName Varchar(55),
	@LastName Varchar(55),
	@MiddleName Varchar(55) = Null,
	@StoreUsername Varchar(55),
	@EncryptionKey Varchar(8000),
	@AccessStartDate  Date = Null,
	@AccessEndDate Date = Null
As
Begin
	Declare @AccessKey varchar(255);
		Set @AccessKey = Convert(Varchar(255),NewID())

	Begin Try

		Exec [Store].[OpenStoreSymmetricKey]

		Insert Into [Store].[AccessKeys]
			(
				[StoreAccessKey],
				[StoreUsername],
				[UserEncryptionKey],
				[UserFirstName],
				[UserLastName],
				[UserMiddleName],
				[UserStartDate],
				[UserEndDate]
			)
		Values 
			(
				EncryptByKey(Key_Guid('StoreKeyA'), @AccessKey),
				@StoreUsername,
				@EncryptionKey,
				@FirstName,
				@LastName,
				IsNull(@MiddleName, 'NA'),
				IsNull(@AccessStartDate, GetDate()),
				IsNull(@AccessEndDate, DateAdd(yy,50,GetDate()))
			)

		Select 
			Convert(Varchar(255), DecryptByKey([StoreAccessKey])) As AccessKey,
			[UserFirstName],
			[UserLastName],
			[UserMiddleName],
			[StoreUsername],
			[UserStartDate],
			[UserEndDate]
		From 
			[Store].[AccessKeys]
		Where
			Convert(varchar(255), DecryptByKey([StoreAccessKey])) = @AccessKey
	End Try

	Begin Catch
		Execute [Store].[ReturnErrorInformation];
	End Catch

End
Return
GO
PRINT N'Creating [Store].[CreateStoreSecret]...';


GO
Create Procedure [Store].[CreateStoreSecret]
	@StoreUsername varchar(255),
	@EntryType int,
	@EntryName Varchar(255),
	@EntryUse Varchar(255),
	@EntryUsername Varchar(8000) = null,
	@EntryPassword Varchar(8000) = null,
	@EntryConnectionString Varchar(8000) = null,
	@EntryToken Varchar(8000) = null,
	@EntryVariable Varchar(8000) = null,
	@EntryStartDate Date = null,
	@EntryEndDate Date = null

As
	
	Begin Try

		Exec [Store].[OpenStoreSymmetricKey]

		If @EntryType = 1
			Begin 
				Insert Into [Store].[SecretCredentials]
					(
						[StoreUsername],
						[EntryName],
						[EntryUse],
						[Username],
						[Password],
						[EntryStartDate],
						[EntryEndDate]

					)
				Values
					(
						@StoreUsername,
						@EntryName,
						@EntryUse,
						EncryptByKey(Key_guid('StoreKeyA'),@EntryUsername),
						EncryptByKey(Key_guid('StoreKeyA'),@EntryPassword),
						IsNull(@EntryStartDate, GetDate()),
						IsNull(@EntryEndDate,DateAdd(yy,50,GetDate()))
					)

				Select 
					[StoreUsername],
					[EntryKey] As EntryKey,
					[EntryName] As EntryName,
					[EntryUse] As EntryUse,
					Convert(Varchar(8000),DecryptByKey([Username])) As EntryUsername,
					Convert(Varchar(8000),DecryptByKey([Password])) As EntryPassword,
					[EntryStartDate] As EntryStartDate,
					[EntryEndDate] As EntryEndDate
				From 
					 [Store].[SecretCredentials]
				Where 
					[StoreUsername] = @StoreUsername And
					[EntryName] = @EntryName
			End 

		Else If @EntryType = 2
			Begin 
				Insert Into [Store].[SecretConnectionStrings]
					(
						[StoreUsername],
						[EntryName],
						[EntryUse],
						[ConnectionString],
						[EntryStartDate],
						[EntryEndDate]
					)
				Values
					(
						@StoreUsername,
						@EntryName,
						@EntryUse,
						EncryptByKey(Key_Guid('StoreKeyA'),@EntryConnectionString),
						IsNull(@EntryStartDate, GetDate()),
						IsNull(@EntryEndDate,DateAdd(yy,50,GetDate()))
					)

				Select
					[StoreUsername],
					[EntryKey] As EntryKey,
					[EntryName] As EntryName,
					[EntryUse] As EntryUse,
					Convert(Varchar(8000), DecryptByKey([ConnectionString])) As EntryConnectionString,
					[EntryStartDate] As EntryStartDate,
					[EntryEndDate] As EntryEndDate
				From 
					[Store].[SecretConnectionStrings]
				Where
					[StoreUsername] = @StoreUsername And 
					Convert(varchar(8000), DecryptByKey([ConnectionString])) = @EntryConnectionString 
			End 

		Else If @EntryType = 3
			Begin 
				Insert Into [Store].[SecretTokens]
					(
						[StoreUsername],
						[EntryName],
						[EntryUse],
						[Token],
						[EntryStartDate],
						[EntryEndDate]
					)
				Values
					(
						@StoreUsername,
						@EntryName,
						@EntryUse,
						EncryptByKey(KEY_GUID('StoreKeyA'),@EntryToken),
						IsNull(@EntryStartDate, GetDate()),
						IsNull(@EntryEndDate,DateAdd(yy,50,GetDate()))
					)
	
				Select
					[StoreUsername],
					[EntryKey] As EntryKey,
					[EntryName] As EntryName,
					[EntryUse] As EntryUse,
					Convert(Varchar(8000), DecryptbyKey([Token])) As EntryToken,
					[EntryStartDate] As EntryStartDate,
					[EntryEndDate] As EntryEndDate
				From 
					[Store].[SecretTokens]
				Where 
					[StoreUsername] = @StoreUsername And 
					Convert(Varchar(8000), DecryptbyKey([Token])) = @EntryToken
			End 

		Else If @EntryType = 4
			Begin
				Insert Into [Store].[SecretVariables]
					(
						[StoreUsername],
						[EntryName],
						[EntryUse],
						[Variable],
						[EntryStartDate],
						[EntryEndDate]

					)
				Values
					(
						@StoreUsername,
						@EntryName,
						@EntryUse,
						ENCRYPTBYKEY(KEY_GUID('StoreKeyA'),@EntryVariable),
						IsNull(@EntryStartDate, GetDate()),
						IsNull(@EntryEndDate,DateAdd(yy,50,GetDate()))
					)

					Select 
						[StoreUsername],
						[EntryKey] As EntryKey,
						[EntryName] As EntryName,
						[EntryUse] As EntryUse,
						Convert(Varchar(8000), DecryptByKey([Variable])) As EntryVariable,
						[EntryStartDate] As EntryStartDate,
						[EntryEndDate] As EntryEndDate
					From 
						[Store].[SecretVariables]
					Where 
						[StoreUsername] = @StoreUsername And
						Convert(Varchar(8000), DecryptByKey([Variable])) = @EntryVariable
			End
	End Try 

	Begin Catch 
		Execute [Store].[ReturnErrorInformation];
	End Catch
Return
GO
PRINT N'Creating [Store].[ReturnStoreSecret]...';


GO
Create Procedure [Store].[ReturnStoreSecret]
	@StoreUsername Varchar(255),
	@EntryKey Varchar(255),
	@EntryType Int
As
	Begin Try

		Exec [Store].[OpenStoreSymmetricKey]

		If @EntryType = 1
			Begin 
				Select 
					1 As EntryType,
					[StoreUsername], 
					[EntryKey],
					[EntryName],
					[EntryUse],
					Convert(Varchar(Max), DecryptByKey([Username])) As EntryUsername,
					Convert(Varchar(Max), DecryptByKey([Password])) As EntryPassword,
					[EntryStartDate],
					[EntryEndDate]
				From 
					[Store].[SecretCredentials]
				Where 
					[StoreUsername] = @StoreUsername And 
					[EntryKey] = @EntryKey
			End

		Else If @EntryType = 2
			Begin
				Select 
					2 As EntryType,
					[StoreUsername],
					[EntryKey],
					[EntryName],
					[EntryUse],
					Convert(Varchar(Max), DecryptByKey([ConnectionString])) As EntryConnectionString,
					[EntryStartDate],
					[EntryEndDate]
				From 
					[Store].[SecretConnectionStrings]
				Where 
					[StoreUsername] = @StoreUsername And 
					[EntryKey] = @EntryKey
			End

		Else If @EntryType = 3
			Begin 
				Select 
					3 As EntryType,
					[StoreUsername],
					[EntryKey],
					[EntryName],
					[EntryUse],
					Convert(Varchar(Max), DecryptByKey(Token)) As EntryToken,
					[EntryStartDate],
					[EntryEndDate]
				From 
					[Store].[SecretTokens]
				Where 
					[StoreUsername] = @StoreUsername And 
					[EntryKey] = @EntryKey
			End
		Else If @EntryType = 4
			Begin 
				Select 
					4 As EntryType,
					[StoreUsername],
					[EntryKey],
					[EntryName],
					[EntryUse],
					Convert(Varchar(Max), DecryptByKey(Variable)) As EntryVariable,
					[EntryStartDate],
					[EntryEndDate]
				From 
					[Store].[SecretVariables]
				Where 
					[StoreUsername] = @StoreUsername And 
					[EntryKey] = @EntryKey
			End 
		End Try 

		Begin Catch 
			Execute [Store].[ReturnErrorInformation]
		End Catch
	
Return
GO
PRINT N'Creating [Store].[ReturnAllUserSecrets]...';


GO
Create Procedure [Store].[ReturnAllUserSecrets]
	@StoreUsername Varchar(255)
As

	Begin Try

		Exec [Store].[OpenStoreSymmetricKey]

		Select	
			StoreUsername,
			EntryKey,
			EntryType,
			EntryName,
			EntryUse,
			EntryUsername,
			EntryPassword,
			EntryConnectionString,
			EntryToken,
			EntryVariable,
			EntryStartDate,
			EntryEndDate
		From
			(
					Select 
						1 As EntryType,
						[StoreUsername], 
						[EntryKey],
						[EntryName],
						[EntryUse],
						Convert(Varchar(Max), DecryptByKey([Username])) As EntryUsername,
						Convert(Varchar(Max), DecryptByKey([Password])) As EntryPassword,
						Null As EntryConnectionString,
						Null As EntryToken,
						Null As EntryVariable,
						[EntryStartDate],
						[EntryEndDate]
					From 
						[Store].[SecretCredentials]

				Union All

					Select 
						2 As EntryType,
						[StoreUsername], 
						[EntryKey],
						[EntryName],
						[EntryUse],
						Null As EntryUsername,
						Null As EntryPassword,
						Convert(Varchar(Max), DecryptByKey([ConnectionString])) As EntryConnectionString,
						Null As EntryToken,
						Null As EntryVariable,
						[EntryStartDate],
						[EntryEndDate]
					From 
						[Store].[SecretConnectionStrings]
		

				Union All

					Select 
						3 As EntryType,
						[StoreUsername], 
						[EntryKey],
						[EntryName],
						[EntryUse],
						Null As EntryUsername,
						Null As EntryPassword,
						Null As EntryConnectionString,
						Convert(Varchar(Max), DecryptByKey([Token])) As EntryToken,
						Null As EntryVariable,
						[EntryStartDate],
						[EntryEndDate]
					From 
						[Store].[SecretTokens]

				Union All

					Select 
						4 As EntryType,
						[StoreUsername], 
						[EntryKey],
						[EntryName],
						[EntryUse],
						Null As EntryUsername,
						Null As EntryPassword,
						Null As EntryConnectionString,
						Null As EntryToken,
						Convert(Varchar(Max), DecryptByKey([Variable])) As EntryVariable,
						[EntryStartDate],
						[EntryEndDate]
					From 
						[Store].[SecretVariables]
		
		
			) As StoreSecrests
		Where 
			[StoreUsername] = @StoreUsername
		Order By
			[EntryType] Desc
	End Try

	Begin Catch
		Execute [Store].[ReturnErrorInformation]
	End Catch

Return
GO
PRINT N'Creating [Store].[UpdateStoreSecret]...';


GO
Create Procedure Store.UpdateStoreSecret
	@StoreUsername Varchar(255),
	@EntryKey Varchar(255),
	@EntryType Int,
	@EntryName Varchar(255) = Null,
	@EntryUse Varchar(255) = Null,
	@EntryUsername Varchar(max) = Null,
	@EntryPassword Varchar(Max) = null,
	@EntryConnectionString Varchar(Max) = Null,
	@EntryToken Varchar(Max) = Null,
	@EntryVariable Varchar(Max) = Null,
	@EntryStartDate Date = Null,
	@EntryEndDate Date = Null

As

	Exec [Store].[OpenStoreSymmetricKey]

	Begin Try
		If @EntryType = 1
			Begin
				Update 
					[Store].[SecretCredentials]
				Set
					[EntryName] = IIf(IsNull(@EntryName,'') = '', [EntryName], @EntryName),
					[EntryUse] = IIf(IsNull(@EntryUse,'') = '', [EntryUse], @EntryUse),
					[Username] = IIf(IsNull(@EntryUsername,'') = '', [Username], EncryptByKey(Key_guid('StoreKeyA'),@EntryUsername)),
					[Password] = IIf(IsNull(@EntryPassword,'') = '', [Password], EncryptByKey(Key_guid('StoreKeyA'),@EntryPassword)),
					[EntryStartDate] = IIf(IsNull(@EntryStartDate,'1900-01-01') = '1900-01-01',[EntryStartDate], @EntryStartDate),
					[EntryEndDate] = IIf(IsNull(@EntryEndDate,'1900-01-01') = '1900-01-01',[EntryEndDate], @EntryEndDate)
				Where 
					[EntryKey] = @EntryKey And 
					[StoreUsername] = @StoreUsername 

				Exec [Store].[ReturnStoreSecret] @StoreUsername, @EntryKey, 1
			End 

		Else If @EntryType = 2
			Begin 
				Update 
					[Store].[SecretConnectionStrings]
				Set
					[EntryName] = IIf(IsNull(@EntryName,'') = '', [EntryName],@EntryName),
					[EntryUse] = IIf(IsNull(@EntryUse,'') = '', [EntryUse], @EntryUse),
					[ConnectionString] = IIf(IsNull(@EntryConnectionString,'') = '', [ConnectionString], EncryptByKey(Key_guid('StoreKeyA'),@EntryConnectionString)),
					[EntryStartDate] = IIf(IsNull(@EntryStartDate,'1900-01-01') = '1900-01-01', [EntryStartDate], @EntryStartDate),
					[EntryEndDate] = IIf(IsNull(@EntryEndDate,'1900-01-01') = '1900-01-01',[EntryEndDate], @EntryEndDate)
				Where 
					[EntryKey] = @EntryKey And 
					[StoreUsername] = @StoreUsername

				Exec [Store].[ReturnStoreSecret] @StoreUsername, @EntryKey, 2
			End 

		Else If @EntryType = 3
			Begin 
				Update 
					[Store].[SecretTokens]
				Set
					[EntryName] = IIf(IsNull(@EntryName,'') = '', [EntryName], @EntryName),
					[EntryUse] = IIf(IsNull(@EntryUse,'') = '', [EntryUse], @EntryUse),
					[Token] = IIf(IsNull(@EntryToken,'') = '', [Token], EncryptByKey(Key_guid('StoreKeyA'), @EntryToken)),
					[EntryStartDate] = IIf(IsNull(@EntryStartDate,'1900-01-01') = '1900-01-01', [EntryStartDate], @EntryStartDate),
					[EntryEndDate] = IIf(IsNull(@EntryEndDate,'1900-01-01') = '1900-01-01', [EntryEndDate], @EntryEndDate)
				Where 
					[EntryKey] = @EntryKey And 
					[StoreUsername] = @StoreUsername

				Exec [Store].[ReturnStoreSecret] @StoreUsername, @EntryKey, 3
			End 

		Else If @EntryType = 4
			Begin 
				Update 
					[Store].[SecretVariables]
				Set
					[EntryName] = IIf(IsNull(@EntryName,'') = '', [EntryName], @EntryName),
					[EntryUse] = IIf(IsNull(@EntryUse,'') = '', [EntryUse], @EntryUse),
					[Variable] = IIf(IsNull(@EntryVariable,'') = '', [Variable], EncryptByKey(Key_guid('StoreKeyA'), @EntryVariable)),
					[EntryStartDate] = IIf(IsNull(@EntryStartDate,'1900-01-01') = '1900-01-01', [EntryStartDate], @EntryStartDate),
					[EntryEndDate] = IIf(IsNull(@EntryEndDate,'1900-01-01') = '1900-01-01', [EntryEndDate], @EntryEndDate)
				Where 
					[EntryKey] = @EntryKey And 
					[StoreUsername] = @StoreUsername

				Exec [Store].[ReturnStoreSecret] @StoreUsername, @EntryKey, 4
			End


		End Try 
		Begin Catch
			Execute [Store].[ReturnErrorInformation];
		End Catch 
Return
GO
PRINT N'Creating [Store].[CreateNewLogEntry]...';


GO
Create Procedure [Store].[CreateNewLogEntry]
	@RequestMethod Varchar(25),
	@Requester Varchar(55),
	@RequestHeader Varchar(Max),
	@RequestQuery Varchar(Max)
As
	
	Begin Try
		Insert Into [Store].[SecretClientRequestLog]
			(
				[RequestDate],
				[RequestTime],
				[Requester],
				[RequestMethod],
				[RequestHeader],
				[RequestQuery]
			)
		Values
			(
				GetDate(),
				Convert(Time(6),Current_Timestamp),
				@Requester,
				@RequestMethod,
				@RequestHeader,
				@RequestQuery
			)
	End Try

	Begin Catch 
		Execute [Store].[ReturnErrorInformation];
	End Catch

Return 0
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Store].[SecretVariables] WITH CHECK CHECK CONSTRAINT [ForeignKeyUsernameAD];

ALTER TABLE [Store].[SecretCredentials] WITH CHECK CHECK CONSTRAINT [ForeignKeyUsernameAA];

ALTER TABLE [Store].[SecretConnectionStrings] WITH CHECK CHECK CONSTRAINT [ForeignKeyUsernameAB];

ALTER TABLE [Store].[SecretTokens] WITH CHECK CHECK CONSTRAINT [ForeignKeyUsernameA];

ALTER TABLE [Store].[SecretClientRequestLog] WITH CHECK CHECK CONSTRAINT [CheckRequestType];


GO
PRINT N'Update complete.';


GO
